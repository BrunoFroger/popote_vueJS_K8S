# fichier de deploiement github pour l'application popote
# (c) B. Froger (2024)-> now

name: Deployment_popote

on:
  release:
    types: [published, edited]

jobs:
  get-code-1:
    runs-on: self-hosted
    steps:
      - name: get code runner 1
        run: |
          docker system prune
          if [[ ! -d ~/popote_file ]]; then
            echo "Chargement du code popote"
            rm -rf ~/popote_files
            mkdir ~/popote_files
            cd ~/popote_files
            wget https://github.com/BrunoFroger/popote_vueJS_K8S/releases/latest > wget.log 2>&1 
            rm latest
            archive="$(cat wget.log | grep release | tail -1 | awk -F' ' '{print $NF}')"
            #echo "archive = $archive"
            version=$(echo $archive | awk -F'/' '{print $NF}')
            #echo "version = $version"
            zipFile=$(echo "$archive.zip" | sed 's/releases/archive/g' | sed 's/tag/tags/g')
            #echo "zipFile = $zipFile"
            rm wget.log
            fichier="$(echo $zipFile | awk -F'/' '{print $NF}')"
            #echo "fichier = $fichier"
            wget $zipFile
            unzip $fichier
            rm $fichier
            # echo on efface les anciennes images popote locale
            # while :
            # do
            #   if [[ $(docker images | grep popote_vuejs_k8s-tags- | wc -l) > 0 ]]; then
            #       image=$(docker images | grep popote_vuejs_k8s-tags- | awk -F' ' '{print $1}' | tail -1)
            #       echo "on efface l'image $image"
            #       docker rmi $image
            #   else
            #       break;
            #   fi
            # done
          fi

  get-code-2:
    runs-on: self-hosted
    steps:
      - name: get code runner 2
        run: |
          docker system prune
          if [[ ! -d ~/popote_file ]]; then
            echo "Chargement du code popote"
            rm -rf ~/popote_files
            mkdir ~/popote_files
            cd ~/popote_files
            wget https://github.com/BrunoFroger/popote_vueJS_K8S/releases/latest > wget.log 2>&1 
            rm latest
            archive="$(cat wget.log | grep release | tail -1 | awk -F' ' '{print $NF}')"
            #echo "archive = $archive"
            version=$(echo $archive | awk -F'/' '{print $NF}')
            #echo "version = $version"
            zipFile=$(echo "$archive.zip" | sed 's/releases/archive/g' | sed 's/tag/tags/g')
            #echo "zipFile = $zipFile"
            rm wget.log
            fichier="$(echo $zipFile | awk -F'/' '{print $NF}')"
            #echo "fichier = $fichier"
            wget $zipFile
            unzip $fichier
            rm $fichier
            # echo on efface les anciennes images popote locale
            # while :
            # do
            #   if [[ $(docker images | grep popote_vuejs_k8s-tags- | wc -l) > 0 ]]; then
            #       image=$(docker images | grep popote_vuejs_k8s-tags- | awk -F' ' '{print $1}' | tail -1)
            #       echo "on efface l'image $image"
            #       docker rmi $image
            #   else
            #       break;
            #   fi
            # done
          fi

  build-mariadb:
    needs: [get-code-1, get-code-2]
    runs-on: self-hosted
    steps:
      - name: build mariadb
        run: |
          echo "build mariadb"
          cd ~/popote_files/popote*
          echo "on execute les commandes dans le repertorie $PWD"
          docker compose build --no-cache mariadb

  build-backend:
    needs: [get-code-1, get-code-2]
    runs-on: self-hosted
    steps:
      - name: build backend
        run: |
          echo "build backend"
          cd ~/popote_files/popote*
          docker compose build --no-cache backend

  build-frontend:
    needs: [get-code-1, get-code-2]
    runs-on: self-hosted
    steps:
      - name: build frontend
        run: |
          echo "build frontend"
          cd ~/popote_files/popote*
          docker compose build --no-cache frontend

  build-nginx:
    needs: [get-code-1, get-code-2]
    runs-on: self-hosted
    steps:
      - name: build nginx
        run: |
          echo "build nginx"
          cd ~/popote_files/popote*
          docker compose build --no-cache nginx

  push-mariadb:
    needs: [build-mariadb]
    runs-on: self-hosted
    steps: 
      - name: push image mariadb on github
        run: |
          echo "push image mariadb sur github"
          cd ~/popote_files/popote*

  push-backend:
    needs: [build-backend]
    runs-on: self-hosted
    steps: 
      - name: push image backend on github
        run: |
          echo "push image backend sur github"
          cd ~/popote_files/popote*

  push-frontend:
    needs: [build-frontend]
    runs-on: self-hosted
    steps: 
      - name: push image frontend on github
        run: |
          echo "push image frontend sur github"
          cd ~/popote_files/popote*

  push-nginx:
    needs: [build-nginx]
    runs-on: self-hosted
    steps: 
      - name: push image nginx on github
        run: |
          echo "push image nginx sur github"
          cd ~/popote_files/popote*

  finalisation:
    needs: [push-nginx, push-backend, push-frontend, push-mariadb]
    runs-on: self-hosted
    steps: 
      - name: finalisation génération images
        run: |
          echo "finalisation génération images"
          cd
          rm -rf ~/popote_files