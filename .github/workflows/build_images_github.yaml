# fichier de deploiement github pour l'application popote
# (c) B. Froger (2024)-> now

name: Deployment_popote

on:
  release:
    types: [published, edited]

jobs:
  get-code-1:
    runs-on: self-hosted
    steps:
      - name: get code runner 1
        run: |
          docker system prune
          if [[ ! -d ~/popote_file ]]; then
            echo "Chargement du code popote"
            rm -rf ~/popote_files
            mkdir ~/popote_files
            cd ~/popote_files
            wget https://github.com/BrunoFroger/popote_vueJS_K8S/releases/latest > wget.log 2>&1 
            rm latest
            archive="$(cat wget.log | grep release | tail -1 | awk -F' ' '{print $NF}')"
            #echo "archive = $archive"
            version=$(echo $archive | awk -F'/' '{print $NF}')
            #echo "version = $version"
            zipFile=$(echo "$archive.zip" | sed 's/releases/archive/g' | sed 's/tag/tags/g')
            #echo "zipFile = $zipFile"
            rm wget.log
            fichier="$(echo $zipFile | awk -F'/' '{print $NF}')"
            #echo "fichier = $fichier"
            wget $zipFile
            unzip $fichier
            rm $fichier
            # echo on efface les anciennes images popote locale
            # while :
            # do
            #   if [[ $(docker images | grep popote_vuejs_k8s-tags- | wc -l) > 0 ]]; then
            #       image=$(docker images | grep popote_vuejs_k8s-tags- | awk -F' ' '{print $1}' | tail -1)
            #       echo "on efface l'image $image"
            #       docker rmi $image
            #   else
            #       break;
            #   fi
            # done
          fi

  get-code-2:
    runs-on: self-hosted
    steps:
      - name: get code runner 2
        run: |
          docker system prune -f
          if [[ ! -d ~/popote_file ]]; then
            echo "Chargement du code popote"
            rm -rf ~/popote_files
            mkdir ~/popote_files
            cd ~/popote_files
            wget https://github.com/BrunoFroger/popote_vueJS_K8S/releases/latest > wget.log 2>&1 
            rm latest
            archive="$(cat wget.log | grep release | tail -1 | awk -F' ' '{print $NF}')"
            #echo "archive = $archive"
            version=$(echo $archive | awk -F'/' '{print $NF}')
            #echo "version = $version"
            zipFile=$(echo "$archive.zip" | sed 's/releases/archive/g' | sed 's/tag/tags/g')
            #echo "zipFile = $zipFile"
            rm wget.log
            fichier="$(echo $zipFile | awk -F'/' '{print $NF}')"
            #echo "fichier = $fichier"
            wget $zipFile
            unzip $fichier
            rm $fichier
            echo "on efface les anciennes images popote locale"
            while :
            do
              if [[ $(docker images | grep popote_vuejs_k8s-tags- | wc -l) > 0 ]]; then
                  image=$(docker images | grep popote_vuejs_k8s-tags- | awk -F' ' '{print $1}' | tail -1)
                  echo "on efface l'image $image"
                  docker rmi $image -f
              else
                  break;
              fi
            done
          fi

  build-mariadb:
    needs: [get-code-1, get-code-2]
    runs-on: self-hosted
    steps:
      - name: build mariadb
        run: |
          module="mariadb"
          echo "build ${module}"
          cd ~/popote_files/popote*
          echo "on execute les commandes dans le repertorie $PWD"
          echo "build de l'image ${module}"
          docker compose build --no-cache ${module}
          image=$(docker images | egrep "^popote" | grep ${module} | awk -F ' ' '{print $1}' | sed 's/ /\n/g' |sort | tail -1)
          echo "tag de l'image ${module}"
          loginDocker=$(docker info 2> /dev/null | grep Username | cut -d':' -f 2)
          echo "login docker = ${loginDocker}"
          docker image tag ${image}:latest ${loginDocker}/${image}:latest
          echo "push de l'image ${loginDocker}${module}"
          docker image push ${loginDocker}/${image}:latest

  build-backend:
    needs: [get-code-1, get-code-2]
    runs-on: self-hosted
    steps:
      - name: build backend
        run: |
          module="backend"
          echo "build ${module}"
          cd ~/popote_files/popote*
          echo "on execute les commandes dans le repertorie $PWD"
          echo "build de l'image ${module}"
          docker compose build --no-cache ${module}
          image=$(docker images | egrep "^popote" | grep ${module} | awk -F ' ' '{print $1}' | sed 's/ /\n/g' |sort | tail -1)
          echo "tag de l'image ${module}"
          loginDocker=$(docker info 2> /dev/null | grep Username | cut -d':' -f 2)
          echo "login docker = ${loginDocker}"
          docker image tag ${image}:latest ${loginDocker}/${image}:latest
          echo "push de l'image ${loginDocker}${module}"
          docker image push ${loginDocker}/${image}:latest

  build-frontend:
    needs: [get-code-1, get-code-2]
    runs-on: self-hosted
    steps:
      - name: build frontend
        run: |
          module="frontend"
          echo "build ${module}"
          cd ~/popote_files/popote*
          echo "on execute les commandes dans le repertorie $PWD"
          echo "build de l'image ${module}"
          docker compose build --no-cache ${module}
          image=$(docker images | egrep "^popote" | grep ${module} | awk -F ' ' '{print $1}' | sed 's/ /\n/g' |sort | tail -1)
          echo "tag de l'image ${module}"
          loginDocker=$(docker info 2> /dev/null | grep Username | cut -d':' -f 2)
          echo "login docker = ${loginDocker}"
          docker image tag ${image}:latest ${loginDocker}/${image}:latest
          echo "push de l'image ${loginDocker}${module}"
          docker image push ${loginDocker}/${image}:latest

  build-nginx:
    needs: [get-code-1, get-code-2]
    runs-on: self-hosted
    steps:
      - name: build nginx
        run: |
          module="nginx"
          echo "build ${module}"
          cd ~/popote_files/popote*
          echo "on execute les commandes dans le repertorie $PWD"
          echo "build de l'image ${module}"
          docker compose build --no-cache ${module}
          image=$(docker images | egrep "^popote" | grep ${module} | awk -F ' ' '{print $1}' | sed 's/ /\n/g' |sort | tail -1)
          echo "tag de l'image ${module}"
          loginDocker=$(docker info 2> /dev/null | grep Username | cut -d':' -f 2)
          echo "login docker = ${loginDocker}"
          docker image tag ${image}:latest ${loginDocker}/${image}:latest
          echo "push de l'image ${loginDocker}${module}"
          docker image push ${loginDocker}/${image}:latest

  finalisation-1:
    needs: [build-nginx, build-backend, build-frontend, build-mariadb]
    runs-on: self-hosted
    if: ${{ always() && (needs.build-nginx.result == 'failure' || needs.build-backend.result == 'failure') || needs.build-frontend.result == 'failure') || needs.build-mariadb.result == 'failure') }}
    steps: 
      - name: finalisation génération images
        run: |
          echo "finalisation génération images"
          cd
          rm -rf ~/popote_files  
          echo "on efface les images popote locale"
          while :
          do
            if [[ $(docker images | grep popote_vuejs_k8s-tags- | wc -l) > 0 ]]; then
                image=$(docker images | grep popote_vuejs_k8s-tags- | awk -F' ' '{print $1}' | tail -1)
                echo "on efface l'image $image"
                docker rmi $image -f
            else
                break;
            fi
          done
  
  finalisation-2:
    needs: [build-nginx, build-backend, build-frontend, build-mariadb]
    runs-on: self-hosted
    if: ${{ always() && (needs.build-nginx.result == 'failure' || needs.build-backend.result == 'failure' || needs.build-frontend.result == 'failure') || needs.build-mariadb.result == 'failure') }}
    steps: 
      - name: finalisation génération images
        run: |
          echo "finalisation génération images"
          cd
          rm -rf ~/popote_files
          echo "on efface les images popote locale"
          while :
          do
            if [[ $(docker images | grep popote_vuejs_k8s-tags- | wc -l) > 0 ]]; then
                image=$(docker images | grep popote_vuejs_k8s-tags- | awk -F' ' '{print $1}' | tail -1)
                echo "on efface l'image $image"
                docker rmi $image -f
            else
                break;
            fi
          done